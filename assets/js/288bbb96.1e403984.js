"use strict";(globalThis.webpackChunkthiencode_github_io=globalThis.webpackChunkthiencode_github_io||[]).push([[3066],{8740:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"hsu/IT206DL01-Object-Oriented-Analysis-and-Design/week1-intro-to-OOAD","title":"Week 1 - Introduction to OOAD","description":"Notes and diagrams for IT206DL01 - Week 1","source":"@site/docs/hsu/IT206DL01-Object-Oriented-Analysis-and-Design/week1-intro-to-OOAD.mdx","sourceDirName":"hsu/IT206DL01-Object-Oriented-Analysis-and-Design","slug":"/hsu/IT206DL01-Object-Oriented-Analysis-and-Design/week1-intro-to-OOAD","permalink":"/docs/hsu/IT206DL01-Object-Oriented-Analysis-and-Design/week1-intro-to-OOAD","draft":false,"unlisted":false,"editUrl":"https://github.com/thiencode/thiencode.github.io/tree/main/docs/hsu/IT206DL01-Object-Oriented-Analysis-and-Design/week1-intro-to-OOAD.mdx","tags":[],"version":"current","frontMatter":{"title":"Week 1 - Introduction to OOAD","sidebar_label":"Week 1 - Intro to OOAD","description":"Notes and diagrams for IT206DL01 - Week 1"},"sidebar":"docs","previous":{"title":"Overview","permalink":"/docs/hsu/IT206DL01-Object-Oriented-Analysis-and-Design/"},"next":{"title":"Create a Page","permalink":"/docs/samples/tutorial-basics/create-a-page"}}');var t=i(7259),l=i(9087);const a={title:"Week 1 - Introduction to OOAD",sidebar_label:"Week 1 - Intro to OOAD",description:"Notes and diagrams for IT206DL01 - Week 1"},r="Week 1: Introduction to Object-Oriented Analysis & Design",c={},d=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"What is Object-Oriented Analysis and Design?",id:"what-is-object-oriented-analysis-and-design",level:2},{value:"The Software Development Lifecycle in OO Context",id:"the-software-development-lifecycle-in-oo-context",level:2},{value:"Traditional vs Object-Oriented Approach",id:"traditional-vs-object-oriented-approach",level:3},{value:"Why Object-Oriented?",id:"why-object-oriented",level:3},{value:"Key Concepts in OOAD",id:"key-concepts-in-ooad",level:2},{value:"1. Objects and Classes",id:"1-objects-and-classes",level:3},{value:"2. Encapsulation",id:"2-encapsulation",level:3},{value:"3. Inheritance",id:"3-inheritance",level:3},{value:"4. Polymorphism",id:"4-polymorphism",level:3},{value:"5. Abstraction",id:"5-abstraction",level:3},{value:"UML (Unified Modeling Language)",id:"uml-unified-modeling-language",level:2},{value:"Types of UML Diagrams",id:"types-of-uml-diagrams",level:3},{value:"Example: Use Case Diagram",id:"example-use-case-diagram",level:3},{value:"OOAD Process",id:"ooad-process",level:2},{value:"1. Requirements Gathering",id:"1-requirements-gathering",level:3},{value:"2. Object-Oriented Analysis",id:"2-object-oriented-analysis",level:3},{value:"3. Object-Oriented Design",id:"3-object-oriented-design",level:3},{value:"4. Implementation",id:"4-implementation",level:3},{value:"Best Practices in OOAD",id:"best-practices-in-ooad",level:2},{value:"Next Week",id:"next-week",level:2},{value:"References",id:"references",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"week-1-introduction-to-object-oriented-analysis--design",children:"Week 1: Introduction to Object-Oriented Analysis & Design"})}),"\n",(0,t.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Understand the fundamentals of Object-Oriented Analysis and Design (OOAD)"}),"\n",(0,t.jsx)(n.li,{children:"Learn the difference between analysis and design phases"}),"\n",(0,t.jsx)(n.li,{children:"Introduction to UML and its importance in OOAD"}),"\n",(0,t.jsx)(n.li,{children:"Understand the software development lifecycle in OO context"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-object-oriented-analysis-and-design",children:"What is Object-Oriented Analysis and Design?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Object-Oriented Analysis (OOA)"})," is the process of identifying and defining the objects, classes, and their relationships in a system from a problem domain perspective."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Object-Oriented Design (OOD)"})," is the process of defining the solution architecture, including classes, objects, methods, and their interactions from an implementation perspective."]}),"\n",(0,t.jsx)(n.h2,{id:"the-software-development-lifecycle-in-oo-context",children:"The Software Development Lifecycle in OO Context"}),"\n",(0,t.jsx)(n.h3,{id:"traditional-vs-object-oriented-approach",children:"Traditional vs Object-Oriented Approach"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Traditional Approach:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Requirements Gathering"}),"\n",(0,t.jsx)(n.li,{children:"Analysis"}),"\n",(0,t.jsx)(n.li,{children:"Design"}),"\n",(0,t.jsx)(n.li,{children:"Implementation"}),"\n",(0,t.jsx)(n.li,{children:"Testing"}),"\n",(0,t.jsx)(n.li,{children:"Deployment"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Object-Oriented Approach:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Requirements Gathering"}),"\n",(0,t.jsx)(n.li,{children:"Object-Oriented Analysis (OOA)"}),"\n",(0,t.jsx)(n.li,{children:"Object-Oriented Design (OOD)"}),"\n",(0,t.jsx)(n.li,{children:"Implementation"}),"\n",(0,t.jsx)(n.li,{children:"Testing"}),"\n",(0,t.jsx)(n.li,{children:"Deployment"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"why-object-oriented",children:"Why Object-Oriented?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Systems are divided into smaller, manageable objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reusability"}),": Objects can be reused across different systems"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintainability"}),": Changes are localized to specific objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extensibility"}),": New features can be added by extending existing objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Real-world modeling"}),": OO concepts map naturally to real-world entities"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-concepts-in-ooad",children:"Key Concepts in OOAD"}),"\n",(0,t.jsx)(n.h3,{id:"1-objects-and-classes",children:"1. Objects and Classes"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Object"}),": An instance of a class that has state and behavior\n",(0,t.jsx)(n.strong,{children:"Class"}),": A blueprint or template that defines the properties and methods of objects"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"classDiagram\n    class Person {\n        -name: string\n        -age: int\n        +getName(): string\n        +setName(name: string): void\n        +getAge(): int\n        +setAge(age: int): void\n    }\n\n    class Student {\n        -studentId: string\n        -major: string\n        +getStudentId(): string\n        +setMajor(major: string): void\n        +study(): void\n    }\n\n    Person <|-- Student\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-encapsulation",children:"2. Encapsulation"}),"\n",(0,t.jsx)(n.p,{children:"The bundling of data and methods that operate on that data within a single unit (class)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class BankAccount {\n    constructor(accountNumber, balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Public methods\n    deposit(amount) {\n        if (amount > 0) {\n            this.balance += amount;\n        }\n    }\n\n    withdraw(amount) {\n        if (amount > 0 && amount <= this.balance) {\n            this.balance -= amount;\n        }\n    }\n\n    getBalance() {\n        return this.balance;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-inheritance",children:"3. Inheritance"}),"\n",(0,t.jsx)(n.p,{children:"The mechanism by which a class can inherit properties and methods from a parent class."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"classDiagram\n    class Shape {\n        +area(): double\n        +perimeter(): double\n    }\n\n    class Circle {\n        -radius: double\n        +area(): double\n        +perimeter(): double\n    }\n\n    class Rectangle {\n        -width: double\n        -height: double\n        +area(): double\n        +perimeter(): double\n    }\n\n    Shape <|-- Circle\n    Shape <|-- Rectangle\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-polymorphism",children:"4. Polymorphism"}),"\n",(0,t.jsx)(n.p,{children:"The ability of objects to take on different forms or respond differently to the same method call."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'class Animal {\n    makeSound() {\n        return "Some generic animal sound";\n    }\n}\n\nclass Dog extends Animal {\n    makeSound() {\n        return "Woof!";\n    }\n}\n\nclass Cat extends Animal {\n    makeSound() {\n        return "Meow!";\n    }\n}\n\n// Polymorphic behavior\nconst animals = [new Dog(), new Cat(), new Animal()];\n\nanimals.forEach(animal => {\n    console.log(animal.makeSound());\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-abstraction",children:"5. Abstraction"}),"\n",(0,t.jsx)(n.p,{children:"The process of hiding complex implementation details and showing only the essential features."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'class DatabaseConnection {\n    connect() {\n        // Complex connection logic hidden\n        console.log("Connected to database");\n    }\n\n    query(sql) {\n        // Complex query execution hidden\n        return "Query results";\n    }\n\n    disconnect() {\n        // Complex disconnection logic hidden\n        console.log("Disconnected from database");\n    }\n}\n\n// Client code only sees the simple interface\nconst db = new DatabaseConnection();\ndb.connect();\ndb.query("SELECT * FROM users");\ndb.disconnect();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"uml-unified-modeling-language",children:"UML (Unified Modeling Language)"}),"\n",(0,t.jsx)(n.p,{children:"UML is the standard language for visualizing, specifying, constructing, and documenting the artifacts of software systems."}),"\n",(0,t.jsx)(n.h3,{id:"types-of-uml-diagrams",children:"Types of UML Diagrams"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Structural Diagrams"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Class Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Object Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Package Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Deployment Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Component Diagram"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavioral Diagrams"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use Case Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Activity Diagram"}),"\n",(0,t.jsx)(n.li,{children:"State Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Sequence Diagram"}),"\n",(0,t.jsx)(n.li,{children:"Communication Diagram"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-use-case-diagram",children:"Example: Use Case Diagram"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Student] --\x3e B(Register for Course)\n    A --\x3e C(View Grades)\n    A --\x3e D(Submit Assignment)\n\n    E[Instructor] --\x3e F(Create Course)\n    E --\x3e G(Grade Assignments)\n    E --\x3e H(Manage Students)\n\n    I[Administrator] --\x3e J(Manage Users)\n    I --\x3e K(System Configuration)\n\n    B --\x3e L{Course Registration System}\n    C --\x3e L\n    D --\x3e L\n    F --\x3e L\n    G --\x3e L\n    H --\x3e L\n    J --\x3e L\n    K --\x3e L\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ooad-process",children:"OOAD Process"}),"\n",(0,t.jsx)(n.h3,{id:"1-requirements-gathering",children:"1. Requirements Gathering"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Identify stakeholders"}),"\n",(0,t.jsx)(n.li,{children:"Collect functional and non-functional requirements"}),"\n",(0,t.jsx)(n.li,{children:"Create use case diagrams"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-object-oriented-analysis",children:"2. Object-Oriented Analysis"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Identify classes and objects"}),"\n",(0,t.jsx)(n.li,{children:"Define relationships between classes"}),"\n",(0,t.jsx)(n.li,{children:"Create conceptual model"}),"\n",(0,t.jsx)(n.li,{children:"Document use cases"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-object-oriented-design",children:"3. Object-Oriented Design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Refine the analysis model"}),"\n",(0,t.jsx)(n.li,{children:"Add implementation details"}),"\n",(0,t.jsx)(n.li,{children:"Design class interfaces"}),"\n",(0,t.jsx)(n.li,{children:"Plan testing strategy"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-implementation",children:"4. Implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Code the classes"}),"\n",(0,t.jsx)(n.li,{children:"Implement relationships"}),"\n",(0,t.jsx)(n.li,{children:"Test individual components"}),"\n",(0,t.jsx)(n.li,{children:"Integration testing"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-in-ooad",children:"Best Practices in OOAD"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"SOLID Principles"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Single Responsibility Principle"}),"\n",(0,t.jsx)(n.li,{children:"Open/Closed Principle"}),"\n",(0,t.jsx)(n.li,{children:"Liskov Substitution Principle"}),"\n",(0,t.jsx)(n.li,{children:"Interface Segregation Principle"}),"\n",(0,t.jsx)(n.li,{children:"Dependency Inversion Principle"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Design Patterns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creational patterns (Factory, Singleton, Builder)"}),"\n",(0,t.jsx)(n.li,{children:"Structural patterns (Adapter, Decorator, Facade)"}),"\n",(0,t.jsx)(n.li,{children:"Behavioral patterns (Observer, Strategy, Command)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Documentation"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Keep UML diagrams up to date"}),"\n",(0,t.jsx)(n.li,{children:"Document design decisions"}),"\n",(0,t.jsx)(n.li,{children:"Maintain clear class interfaces"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-week",children:"Next Week"}),"\n",(0,t.jsx)(n.p,{children:"In the next lecture, we'll dive deeper into UML modeling and start creating detailed class diagrams for real-world systems."}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.omg.org/spec/UML/",children:"UML Specification"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Design Patterns Book"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://martinfowler.com/",children:"OOAD Best Practices"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},9087:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(6363);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);